{"name":"JVTransitionAnimator","tagline":"A simple transition animator  ","body":"### JVTransitionAnimator\r\n[![Version](https://img.shields.io/cocoapods/v/JVTransitionAnimator.svg?style=flat)](http://cocoapods.org/pods/JVTransitionAnimator) \r\n[![License](https://img.shields.io/cocoapods/l/JVTransitionAnimator.svg?style=flat)](http://cocoapods.org/pods/JVTransitionAnimator) \r\n[![Platform](https://img.shields.io/cocoapods/p/JVTransitionAnimator.svg?style=flat)](http://cocoapods.org/pods/JVTransitionAnimator)\r\n\r\nJVTransitionAnimator is a simple helper framework which allows you to present your View Controllers in a pretty cool way, with the use of Transition Animations. Pretty easy to use and customizable.\r\n\r\n## Previews\r\n\r\n###### • Custom Animations\r\n\r\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=6LySLa1raXk?autoplay=1\" target=\"_blank\">![screenshot-1](Previews/jvtransition.preview1.gif)</a>\r\n\r\n###### • Pre-defined Animations\r\n\r\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=wwb_7fKS7F0?autoplay=1\" target=\"_blank\">![screenshot-2](Previews/jvtransition.preview3.gif)</a>\r\n\r\n## Usage\r\n\r\nTo run the example project, clone the repo, and run `pod install` from the Example directory first.\r\n\r\n* Now, just create a JVTransitionAnimator property.\r\n\r\n```objc\r\n- (JVTransitionAnimator *)transitionAnimator\r\n{\r\n    if(!_transitionAnimator)\r\n    {\r\n        _transitionAnimator = [[JVTransitionAnimator alloc] init];\r\n    }\r\n\r\n    return _transitionAnimator;\r\n}\r\n```\r\n\r\n* To enabled interactive transitions you do this, for example, in the viewDidAppear of your UIViewController. Also, we need to set our transition delegate.\r\n\r\n```objc\r\n- (void)viewDidAppear:(BOOL)animated\r\n{\r\n    [super viewDidAppear:animated];\r\n\r\n    // we need to tell our transition animator the current view controller & the new controller to be pushed\r\n    self.transitionAnimator.fromViewController = self;\r\n    self.transitionAnimator.toViewController = self.secondController;\r\n\r\n    // enabling interactive transitions\r\n    self.transitionAnimator.enabledInteractiveTransitions = YES;\r\n\r\n    // also don't forget to tell the new UIViewController to be presented that we will be using our animator & choose the animation\r\n    self.transitionAnimator.slideInOutAnimation = YES;\r\n    self.secondController.transitioningDelegate = self.transitionAnimator;\r\n}\r\n```\r\n\r\n* Then, we can further setup and customize our Transition Animations.\r\n\r\n```objc\r\n// here is the trick if you want longer animations or set a delay or event not bouncing (known as dampling) at all\r\nself.transitionAnimator.duration = 1.0f;\r\nself.transitionAnimator.delay = 0.0f;\r\nself.transitionAnimator.damping = 0.5f;\r\nself.transitionAnimator.velocity = 0.9f;\r\n```\r\n\r\n* Finally, to trigger transitions we just need to make a simple presentViewController function call.\r\n\r\n```objc\r\n// whenever you want to present the new view controller animated\r\n[self presentViewController:self.secondController animated:YES completion:nil];\r\n```\r\n\r\n## Requirements\r\n\r\nDeveloped and tested using iOS8+.\r\n\r\n## Installation\r\n\r\nJVTransitionAnimtor is available through [CocoaPods](http://cocoapods.org). To install\r\nit, simply add the following line to your Podfile:\r\n\r\n```ruby\r\npod \"JVTransitionAnimator\"\r\n```\r\n\r\n## Author & Support\r\n\r\nContact me if you find any bugs or potential room for improvements. Jorge Valbuena (@JV17), jorgevalbuena2@gmail.com. BTW! You are welcome to help in supporting this pod or making improvements to it.\r\n\r\n## License\r\n\r\nJVTouchEventsWindow is available under the MIT license. See the LICENSE file for more info.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}